-- Script generated by Redgate Compare v1.22.1.23470


-- deployment: Creating products...
CREATE TABLE products (
    ProductID int(11) NOT NULL,
    ProductName varchar(100) NULL,
    Price decimal(10,2) NULL
);
ALTER TABLE products ADD PRIMARY KEY (ProductID);


-- deployment: Creating orders...
CREATE TABLE orders (
    OrderID int(11) NOT NULL,
    OrderDate date NULL,
    CustomerID int(11) NULL,
    Amount decimal(10,2) NULL
);
ALTER TABLE orders ADD PRIMARY KEY (OrderID);


-- deployment: Creating orderdetails...
CREATE TABLE orderdetails (
    OrderDetailID int(11) NOT NULL,
    OrderID int(11) NULL,
    ProductID int(11) NULL,
    Quantity int(11) NULL
);
ALTER TABLE orderdetails ADD PRIMARY KEY (OrderDetailID);


-- deployment: Creating productsales...
CREATE VIEW productsales AS select `p`.`ProductID` AS `ProductID`,`p`.`ProductName` AS `ProductName`,sum(`od`.`Quantity`) AS `TotalSold` from (`products` `p` join `orderdetails` `od` on(`p`.`ProductID` = `od`.`ProductID`)) group by `p`.`ProductID`;


-- deployment: Creating employees...
CREATE TABLE employees (
    EmployeeID int(11) NOT NULL,
    FirstName varchar(50) NULL,
    LastName varchar(50) NULL,
    Position varchar(50) NULL
);
ALTER TABLE employees ADD PRIMARY KEY (EmployeeID);


-- deployment: Creating customers...
CREATE TABLE customers (
    CustomerID int(11) NOT NULL,
    FirstName varchar(50) NULL,
    LastName varchar(50) NULL,
    Email varchar(100) NULL
);
ALTER TABLE customers ADD PRIMARY KEY (CustomerID);


-- deployment: Creating customerordersummary...
CREATE VIEW customerordersummary AS select `c`.`CustomerID` AS `CustomerID`,`c`.`FirstName` AS `FirstName`,`c`.`LastName` AS `LastName`,sum(`o`.`Amount`) AS `TotalAmount` from (`customers` `c` join `orders` `o` on(`c`.`CustomerID` = `o`.`CustomerID`)) group by `c`.`CustomerID`;


-- deployment: Creating GetCustomerOrders...
CREATE PROCEDURE GetCustomerOrders (IN cust_id int(11))
BEGIN
    SELECT o.OrderID, o.OrderDate, o.Amount
    FROM Orders o
    WHERE o.CustomerID = cust_id;
END;


-- deployment: Creating AddEmployee...
CREATE PROCEDURE AddEmployee (IN fname varchar(50), IN lname varchar(50), IN position varchar(50))
BEGIN
    INSERT INTO Employees (FirstName, LastName, Position) VALUES (fname, lname, position);
END;


-- deployment: Creating CalculateTotalOrderAmount...
CREATE FUNCTION CalculateTotalOrderAmount (order_id int(11))
RETURNS decimal(10,2)
BEGIN
    DECLARE total DECIMAL(10,2);
    SELECT SUM(p.Price * od.Quantity) INTO total
    FROM OrderDetails od
    JOIN Products p ON od.ProductID = p.ProductID
    WHERE od.OrderID = order_id;
    RETURN total;
END;


-- deployment: Creating orders.CustomerID...
CREATE INDEX CustomerID USING BTREE ON orders(CustomerID);


-- deployment: Creating orders.orders_ibfk_1...
ALTER TABLE orders
    ADD CONSTRAINT orders_ibfk_1 FOREIGN KEY (CustomerID)
    REFERENCES customers(CustomerID)
    ON UPDATE RESTRICT
    ON DELETE RESTRICT;


-- deployment: Creating orderdetails.ProductID...
CREATE INDEX ProductID USING BTREE ON orderdetails(ProductID);


-- deployment: Creating orderdetails.orderdetails_ibfk_2...
ALTER TABLE orderdetails
    ADD CONSTRAINT orderdetails_ibfk_2 FOREIGN KEY (ProductID)
    REFERENCES products(ProductID)
    ON UPDATE RESTRICT
    ON DELETE RESTRICT;


-- deployment: Creating orderdetails.OrderID...
CREATE INDEX OrderID USING BTREE ON orderdetails(OrderID);


-- deployment: Creating orderdetails.orderdetails_ibfk_1...
ALTER TABLE orderdetails
    ADD CONSTRAINT orderdetails_ibfk_1 FOREIGN KEY (OrderID)
    REFERENCES orders(OrderID)
    ON UPDATE RESTRICT
    ON DELETE RESTRICT;

